---
# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

input_number:
  electricity_cost_tariff_1:
    name: "Electricity Cost Tarif 1 (low)"
    min: 0
    max: 1
    step: 0.00001
    unit_of_measurement: "€"
    mode: box
  electricity_cost_tariff_2:
    name: "Electricity  Cost Tarif 2 (High)"
    min: 0
    max: 1
    step: 0.00001
    unit_of_measurement: "€"
    mode: box
  electricity_profit:
    name: "Electricity Yield After Netting"
    min: -1
    max: 0
    step: 0.00001
    unit_of_measurement: "€"
    mode: box
  electricity_balancing_fee_per_kwh:
    name: "Return Delivery Costs Per kWh"
    min: 0
    max: 1
    step: 0.00001
    unit_of_measurement: "€"
    mode: box
  electricity_tax_per_kwh:
    name: "Electricity Tax Per kWh"
    min: 0
    max: 1
    step: 0.00001
    unit_of_measurement: "€"
    mode: box
  electricity_fixed_fee_day:
    name: "Electricity Fixed Charge Per Day"
    min: 0
    max: 10
    step: 0.00001
    unit_of_measurement: "€"
    mode: box
  electricity_fixed_return_day:
    name: "Energy Tax Refund Per Day"
    min: -10
    max: 0
    step: 0.00001
    unit_of_measurement: "€"
    mode: box
  gas_cost:
    name: "Gas Costs Per m3"
    min: 0
    max: 10
    step: 0.00001
    unit_of_measurement: "€"
    mode: box
  gas_tax:
    name: "Gas Tax Per m3"
    min: 0
    max: 1
    step: 0.00001
    unit_of_measurement: "€"
    mode: box
  gas_fixed_fee_day:
    name: "Gas Fixed Charge Per Day"
    min: 0
    max: 10
    step: 0.00001
    unit_of_measurement: "€"
    mode: box

input_boolean:
  use_balancing_kwh_scale:
    name: "Use kWh Scale For Balancing"
  use_balancing_per_kwh:
    name: "Use Per kWh For Balancing"

template:
  - sensor:
      - name: "Energy Electricity Costs"
        unique_id: energy_electricitycost_id
        unit_of_measurement: "€"
        state: >
            {% set ns = namespace(scale=0, balancing=0) %}
            {% set balance_tariff_1 = states('sensor.electricity_meter_consumption_tariff_1_since_contract_start') | float(0) - states('sensor.electricity_meter_production_tariff_1_since_contract_start') | float(0) %}
            {% set balance_tariff_2 = states('sensor.electricity_meter_consumption_tariff_2_since_contract_start') | float(0) - states('sensor.electricity_meter_production_tariff_2_since_contract_start') | float(0) %}
            {% set total_balance = balance_tariff_1 + balance_tariff_2 %}
            {% set total_production = states('sensor.electricity_meter_production_tariff_1_since_contract_start') | float(0) + states('sensor.electricity_meter_production_tariff_2_since_contract_start') | float(0) %}
            {% if total_balance > 0 %}
                {% set energytax = total_balance * states('input_number.electricity_tax_per_kwh') | float(0) %}
            {% else %}
                {% set energytax = 0 %}
            {% endif %}
            {% set dayssincestart = ((as_timestamp(now()) - as_timestamp(states('input_datetime.energycontract_startdate'))) / 60 /1440) | int(0) %}
            {% set fixed_fee = dayssincestart * states('input_number.electricity_fixed_fee_day') | float(0) | float(0) %}
            {% set fixed_fee_return = dayssincestart * states('input_number.electricity_fixed_return_day') | float(0) | float(0) %}
            {% if balance_tariff_2 > 0 %}
                {% set energiecost_tariff_2 = balance_tariff_2 * states('input_number.electricity_cost_tariff_2') | float(0) %}
            {% else %}
                {% set energiecost_tariff_2 = 0 %}
                {% set ns.balancing = ns.balancing + balance_tariff_2 %}
            {% endif %}
            {% if (balance_tariff_1 + ns.balancing) > 0 %}
                {% set energiecost_tariff_1 = (balance_tariff_1 + ns.balancing) * states('input_number.electricity_cost_tariff_1') | float(0) %}
                {% set ns.balancing = 0 %}
            {% else %}
                {% set energiecost_tariff_1 = 0 %}
                {% set ns.balancing = ns.balancing + balance_tariff_1 %}
            {% endif %}
            {% set ns.balancing = -1 * ns.balancing * states('input_number.electricity_profit') | float(0) %}
            {% set kwh_scale =
                 {
                 1000  :  0,
                 1100 :  85,
                 1200 :  95,
                 1300 :  105,
                 1400 :  115,
                 1500 :  125,
                 1750 :  145,
                 2000 :  175,
                 2250 :  205,
                 2500 :  240,
                 2750 :  275,
                 3000 :  310,
                 3250 :  345,
                 3500 :  370,
                 4000 :  410,
                 4500 :  470,
                 5000 :  520,
                 6000 :  605,
                 7000 :  715,
                 8000 :  825,
                 9000 :  935,
                 10000 :  1045
                 }
            %}
            {% if states('input_boolean.use_balancing_kwh_scale') %}
                {% for i in kwh_scale %}
                  {% if total_production < i %}
                    {% set ns.scale = kwh_scale[i] %}
                    {% break %}
                  {% endif %}
                {% endfor %}
            {% elif states('input_boolean.use_balancing_per_kwh') %}
                {% set ns.scale = states('electricity_balancing_fee_per_kwh') | float(0) * total_production %}
            {% endif %}
            {{ fixed_fee + energytax + fixed_fee_return + ns.balancing + energiecost_tariff_1 + energiecost_tariff_2 + ns.scale}}
      - name: "Energie Gas Costs"
        unique_id: energy_gascost_id
        unit_of_measurement: "€"
        state: >
            {% set dayssincestart = ((as_timestamp(now()) - as_timestamp(states('input_datetime.energycontract_startdate'))) / 60 /1440) | int(0) %}
            {% set fixed_fee = dayssincestart * states('input_number.gas_fixed_fee_day') | float(0) | float(0) %}
            {% set energytax = states('sensor.gas_meter_since_contract_start') | float(0) * states('input_number.gas_tax') | float(0) %}
            {% set energycost = states('sensor.gas_meter_since_contract_start') | float(0) * states('input_number.gas_cost') | float(0) %}
            {{ fixed_fee + energytax + energycost }}

utility_meter:
  electricity_meter_consumption_tariff_1_since_contract_start:
    unique_id: electricity_meter_consumption_tariff_1_since_contract_start_id
    source: sensor.energy_consumption_tarif_1
  electricity_meter_consumption_tariff_2_since_contract_start:
    unique_id: electricity_meter_consumption_tariff_2_since_contract_start_id
    source: sensor.energy_consumption_tarif_2
  electricity_meter_production_tariff_1_since_contract_start:
    unique_id: electricity_meter_production_tariff_1_since_contract_start_id
    source: sensor.energy_production_tarif_1
  electricity_meter_production_tariff_2_since_contract_start:
    unique_id: electricity_meter_production_tariff_2_since_contract_start_id
    source: sensor.energy_production_tarif_2
  gas_meter_since_contract_start:
    unique_id: gas_meter_since_contract_start_id
    source: sensor.gas_consumption

input_datetime:
  energycontract_startdate:
    name: "Start Date Of The Energy Contract"
    has_date: true
    has_time: false
